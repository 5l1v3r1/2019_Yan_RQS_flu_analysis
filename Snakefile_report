include: "Snakefile_WHO"

resolutions = ['2y']
lineages = ['h3n2'] #, 'h1n1pdm']
segments = ['ha', 'na']
centers = ['cdc']
assays = ['hi', 'fra']
passages = ['cell', 'egg']

def mutations_to_plot(v):
    mutations = {('h3n2', 'ha'):["HA1:128A", "HA1:131K", "HA1:135K", "HA1:135N",
                                 "HA1:142G", "HA1:212T", "HA1:214T"],
                 ('h3n2', 'na'):["NA:329S", "NA:386S", "NA:126L"],
                 ('h1n1pdm', 'ha'):["HA1:164T","HA1:183P", "HA1:235D", "HA1:233I"],
                 ('h1n1pdm', 'na'):["NA:77A","NA:93H", "NA:416N"],
                 ('vic', 'ha'):["HA1:162-","HA1:175V", "HA1:209N"],
                 ('vic', 'na'):["NA:371Q","NA:375K"],
                 ('yam', 'ha'):["HA1:229D","HA1:232N"],
                 ('yam', 'na'):["NA:395S", "NA:65H", "NA:402P"],
                  }
    return mutations[(v.lineage, v.segment)]

def clades_to_plot(v):
    clades = {('h3n2', 'ha'):["A2/re", "A1", "A1b/131K", "A1b/135K", "A1b/135N", '3c3.A', 'A3'],
              ('h1n1pdm', 'ha'):["6b1.A", "6b1.A1", "6b1.A2","6b1.A3","6b1.A4","6b1.A5"],
              ('vic', 'ha'):["V1A", "V1A.1", "V1A/165N"],
              ('yam', 'ha'):["172Q", "3"],
              }
    return clades[(v.lineage, v.segment)]


def get_antigens(w):
    antigen_list = {'h3n2':[ 'A/Texas/68/2017',
                             'A/NewJersey/26/2014',
                             'A/Texas/88/2016',
                             'A/California/213/2016',
                             'A/Nevada/22/2016',
                             'A/SouthAustralia/135/2016',
                             'A/Wisconsin/327/2017',
                             'A/Florida/23/2017',
                             'A/Afghanistan/616/2017',
                             'A/Antananarivo/1067/2016',
                             'A/Delaware/32/2016',
                             'A/NorthCarolina/4/2016',
                             'A/Washington/16/2017',
                             'A/Singapore/Infimh-16-0019/2016',
                             'A/Washington/106/2016',
                             'A/Idaho/33/2016',
                             'A/Texas/71/2017',
                             'A/Hawaii/47/2014',
                             'A/HongKong/7127/2014',
                             'A/Switzerland/9715293/2013',
                             'A/Michigan/15/2014']}
    return antigen_list[w.lineage]


regions_to_graph = ['north_america', 'europe', 'china', 'oceania', 'japan_korea']


rule all_report:
    input:
        auspice_tree = expand("auspice/flu_seasonal-report_{lineage}_{segment}_{resolution}_tree.json", lineage=lineages, segment=segments, resolution=resolutions),
        auspice_meta = expand("auspice/flu_seasonal-report_{lineage}_{segment}_{resolution}_meta.json", lineage=lineages, segment=segments, resolution=resolutions),

rule figures:
    input:
        expand("figures/mutation_frequencies_{lineage}_{segment}_{resolution}.png", segment=segments, lineage=lineages, resolution=resolutions),
        expand("figures/clade-frequencies_{lineage}_ha_{resolution}.png", lineage=lineages, resolution=resolutions),
        expand("figures/age-distribution_{lineage}_{resolution}.png", lineage=lineages, resolution=resolutions),
        expand("figures/titer_matrix_{center}_{lineage}_ha_{resolution}_{passage}_{assay}.png",
                lineage=lineages, resolution=resolutions, center=centers, passage=passages, assay=assays)



rule mutation_frequency_graphs:
    input:
        mutations = expand("results/mutation_frequencies_{region}_{{lineage}}_{{segment}}_{{resolution}}.json",
                    region=regions_to_graph),
    params:
        mutations = mutations_to_plot,
        regions = regions_to_graph,
    output:
        mutations = "figures/mutation_frequencies_{lineage}_{segment}_{resolution}.png",
        total_counts = "figures/total-sample-count_{lineage}_{segment}_{resolution}.png",
    shell:
        """
        python scripts/graph_frequencies.py --mutation-frequencies {input.mutations} \
                                            --mutations {params.mutations} \
                                            --regions {params.regions} \
                                            --output-mutations {output.mutations} \
                                            --output-total-counts {output.total_counts} \
        """

rule frequency_graphs:
    input:
        tree = "results/tree-frequencies_cdc_{lineage}_{segment}_{resolution}_cell_hi.json",
        clades = "results/clades_cdc_{lineage}_{segment}_{resolution}_cell_hi.json"
    params:
        regions = regions_to_graph,
        clades = clades_to_plot,
    output:
        tree_counts = "figures/tree-sample-count_{lineage}_{segment}_{resolution}.png",
        clades = "figures/clade-frequencies_{lineage}_{segment}_{resolution}.png"
    shell:
        """
        python scripts/graph_frequencies.py --tree-frequencies {input.tree} \
                                            --clade-annotation {input.clades} \
                                            --clades {params.clades} \
                                            --regions {params.regions} \
                                            --output-clades {output.clades} \
                                            --output-tree-counts {output.tree_counts}
        """


rule mutation_statistics:
    input:
        mutations = rules.complete_mutation_frequencies.output.mut_freq,
        node_data = rules.translate.output.node_data
    params:
        offset = 4,
        n_out=20
    output:
        rising = "results/rising_mutations_{region}_{lineage}_{segment}_{resolution}.txt",
        recurring_mut = "results/recurring_mutations_{region}_{lineage}_{segment}_{resolution}.txt",
        recurring_pos = "results/recurring_positions_{region}_{lineage}_{segment}_{resolution}.txt"
    run:
        from scripts.mutation_statistics import rising_mutations, recurring_mutations
        rising_mutations(input.mutations, offset=params.offset, fname=output.rising, n_out=params.n_out)

        recurring_mutations(input.node_data, fname_by_position=output.recurring_pos, fname_by_mutation=output.recurring_mut, n_out=params.n_out)


rule age_distributions:
    input:
        metadata = "results/metadata_{lineage}_ha.tsv",
        exclude = files.outliers
    params:
        resolution="{resolution}"
    output:
        "figures/age-distribution_{lineage}_{resolution}.png"
    shell:
        """
        python scripts/age_distributions.py  --metadata {input.metadata} \
                                             --resolution {params.resolution} \
                                             --exclude {input.exclude} \
                                             --output {output}
        """

rule titer_matrix:
    input:
        titers = "auspice-who/flu_seasonal_{center}_{lineage}_{segment}_{resolution}_{passage}_{assay}_titers.json",
        clades = "results/clades_{center}_{lineage}_{segment}_{resolution}_{passage}_{assay}.json"
    params:
        antigens = get_antigens
    output:
        "figures/titer_matrix_{center}_{lineage}_{segment}_{resolution}_{passage}_{assay}.png"
    shell:
        '''
        python3 scripts/plot_titer_matrices.py --titers {input.titers} \
                                               --clades {input.clades} \
                                               --antigens {params.antigens} \
                                               --output {output}
        '''

