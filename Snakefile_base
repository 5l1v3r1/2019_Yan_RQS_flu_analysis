from datetime import date
import pandas as pd
from treetime.utils import numeric_date

segments = ['ha']
min_length = 900

def vpy(v):
    vpy = {'all':{'h3n2':20, 'h1n1':20, 'h1n1pdm':50, 'B':10}}
    return vpy[v.resolution][v.lineage] if v.resolution in vpy else 5

def reference_strain(v):
    references = {'h3n2':"A/Beijing/32/1992",
                  'h1n1pdm':"A/California/07/2009",
                  'vic':"B/HongKong/02/1993",
                  'yam':"B/Singapore/11/1994"
                  }
    return references[v.lineage]

genes_to_translate = {'ha':['SigPep', 'HA1', 'HA2'], 'na':['NA']}
def gene_names(w):
    return genes_to_translate[w.segment]

def translations(w):
    genes = gene_names(w)
    return ["results/aa-seq_%s_%s_%s_%s_%s_%s_%s.fasta"%(w.center, w.lineage, w.segment, w.resolution, w.passage, w.assay, g)
            for g in genes]

def pivot_interval(w):
    """Returns the number of months between pivots by build resolution.
    """
    pivot_intervals_by_resolution = {'all': 24, '2y': 1, '3y': 2, '6y': 3, '12y': 6}
    return pivot_intervals_by_resolution[w.resolution]

def min_date(w):
    if w.resolution=='all':
        return {"h1n1":1918, "h3n2":1968, "B":1900, "h1n1pdm":2009}[w.lineage]
    else:
        now = numeric_date(date.today())
        return now - int(w.resolution[:-1])

def max_date(w):
    return numeric_date(date.today())

def clock_rate(w):
    rate = {
        ('h3n2', 'ha'): 0.0043, ('h3n2', 'na'):0.0029,
        ('h1n1pdm', 'ha'): 0.0040, ('h1n1pdm', 'na'):0.0032,
        ('h1n1', 'ha'): 0.0040, ('h1n1', 'na'):0.0032,
        ('vic', 'ha'): 0.0024, ('vic', 'na'):0.0015,
        ('yam', 'ha'): 0.0019, ('yam', 'na'):0.0013,
        ('B', 'ha'): 0.0019, ('B', 'na'):0.0013
    }
    return rate[(w.lineage, w.segment)]


#
# Configure amino acid distance masks.
#

# Load mask configuration including which masks map to which attributes per
# lineage and segment.
masks_config = pd.read_table("config/mask_config.tsv")

def _get_build_mask_config(wildcards):
    config = masks_config[(masks_config["lineage"] == wildcards.lineage) &
                          (masks_config["segment"] == wildcards.segment)]
    if config.shape[0] > 0:
        return config
    else:
        return None

def _get_mask_attribute_names_by_wildcards(wildcards):
    config = _get_build_mask_config(wildcards)
    return " ".join(config.loc[:, "attribute"].values)

def _get_mask_names_by_wildcards(wildcards):
    config = _get_build_mask_config(wildcards)
    return " ".join(config.loc[:, "mask"].values)


outliers = "config/outliers_{lineage}.txt",
exclude_sites = "config/exclude-sites_{lineage}.txt",
references = "config/references_{lineage}.txt",
reference = "config/reference_{lineage}_{segment}.gb",
colors = "config/colors.tsv",
auspice_config = "config/auspice_config_{lineage}.json",
input_data = "data/{lineage}_{segment}_download.tsv",
titer_data = "data/titers_{lineage}.tsv"


rule parse:
    input:
        input_data
    output:
        sequences="results/sequences_{lineage}_{segment}.fasta",
        metadata="results/metadata_{lineage}_{segment}.tsv"
    run:
        import pandas as pd
        from Bio import SeqIO, Seq, SeqRecord
        from collections import defaultdict
        mapper = {'Strain Name':'strain', 'Geographic Grouping':'region',
                  'Sequence Accession':'accession','Country':'country',
                  'State/Province':"division",'Host Species':'host',
                  'Collection Date':'date', 'real_date':'real_date'}

        print(input)
        df = pd.read_csv(str(input), sep='\t').rename(columns=mapper)

        seqs = defaultdict(list)
        for ri, seq in df.iterrows():
            strain = seq["strain"]
            if any([x in strain for x in ",()]["]):
                continue
            seqs[strain].append(seq)

        outseqs = []
        for strain in seqs:
            seqs[strain].sort(key=lambda x:-len(x["Sequence"]))
            s = seqs[strain][0]
            try:
                date = pd.core.tools.datetimes.to_datetime(s['date'],format = '%m/%d/%Y').strftime('%Y-%m-%d')
            except ValueError:
                try:
                    y = int(s['date'])
                    date = s['date']+'-XX-XX'
                except:
                    continue

            if wildcards.lineage=='h1n1':
                s['real_date']=date
                year = int(date[:4])
                s['date']= str(int(date[:4])-(23 if year>1970 else 0))+date[4:]
            else:
                s['date']=date
            for c in " '+-":
                s['strain']=s['strain'].replace(c,'_')
            outseqs.append(s)

        SeqIO.write([SeqRecord.SeqRecord(seq=Seq.Seq(s['Sequence']),
                                         name=s["strain"],
                                         id=s["strain"],
                                         description="") for s in outseqs],
                     output.sequences, 'fasta')

        df2 = pd.DataFrame(outseqs).loc[:,mapper.values()]
        df2.to_csv(output.metadata, sep='\t')


rule filter:
    message:
        """
        Filtering {wildcards.lineage} {wildcards.segment} sequences:
          - less than {params.min_length} bases
          - outliers
        """
    input:
        metadata = rules.parse.output.metadata,
        sequences = rules.parse.output.sequences,
        exclude = outliers
    output:
        sequences = 'results/filtered_{lineage}_{segment}.fasta'
    params:
        min_length = min_length
    shell:
        """
        augur filter \
            --sequences {input.sequences} \
            --metadata {input.metadata} \
            --min-length {params.min_length} \
            --non-nucleotide \
            --exclude {input.exclude} \
            --output {output}
        """

rule select_strains:
    input:
        sequences = expand("results/filtered_{{lineage}}_{segment}.fasta", segment=segments),
        metadata = expand("results/metadata_{{lineage}}_{segment}.tsv", segment=segments),
        titers = titer_data,
        include = references
    output:
        strains = "results/strains_{center}_{lineage}_{resolution}_{passage}_{assay}.txt",
    params:
        viruses_per_year = vpy,
        time_interval = "1900-01-10 2019-12-31"
    shell:
        """
        python3 scripts/select_strains.py \
            --sequences {input.sequences} \
            --metadata {input.metadata} \
            --segments {segments} \
            --include {input.include} \
            --lineage {wildcards.lineage} \
            --time-interval {params.time_interval} \
            --viruses_per_year {params.viruses_per_year} \
            --titers {input.titers} \
            --output {output.strains}
        """

rule extract:
    input:
        sequences = rules.filter.output.sequences,
        strains = rules.select_strains.output.strains
    output:
        sequences = 'results/extracted_{center}_{lineage}_{segment}_{resolution}_{passage}_{assay}.fasta'
    shell:
        """
        python3 scripts/extract_sequences.py \
            --sequences {input.sequences} \
            --samples {input.strains} \
            --output {output}
        """

rule align:
    message:
        """
        Aligning sequences to {input.reference}
        """
    input:
        sequences = rules.extract.output.sequences,
        reference = reference
    output:
        alignment = "results/aligned_{center}_{lineage}_{segment}_{resolution}_{passage}_{assay}.fasta"
    shell:
        """
        augur align \
            --sequences {input.sequences} \
            --reference-sequence {input.reference} \
            --output {output.alignment} \
            --remove-reference \
            --nthreads auto
        """

rule tree:
    message: "Building tree"
    input:
        alignment = rules.align.output.alignment,
        exclude_sites = exclude_sites
    output:
        tree = "results/tree-raw_{center}_{lineage}_{segment}_{resolution}_{passage}_{assay}.nwk"
    shell:
        """
        augur tree \
            --alignment {input.alignment} \
            --output {output.tree} \
            --nthreads auto \
            --exclude-sites {input.exclude_sites}
        """

rule refine:
    message:
        """
        Refining tree
          - estimate timetree
          - use {params.coalescent} coalescent timescale
          - estimate {params.date_inference} node dates
          - filter tips more than {params.clock_filter_iqd} IQDs from clock expectation
        """
    input:
        tree = rules.tree.output.tree,
        alignment = rules.align.output,
        metadata = rules.parse.output.metadata
    output:
        tree = "results/tree_{center}_{lineage}_{segment}_{resolution}_{passage}_{assay}.nwk",
        node_data = "results/branch-lengths_{center}_{lineage}_{segment}_{resolution}_{passage}_{assay}.json"
    params:
        coalescent = "const",
        date_inference = "marginal",
        clock_filter_iqd = 4,
        clock_rate = clock_rate
    run:
        shell(
        """
        augur refine \
            --tree {input.tree} \
            --alignment {input.alignment} \
            --metadata {input.metadata} \
            --output-tree {output.tree} \
            --output-node-data {output.node_data} \
            --timetree \
            --coalescent {params.coalescent} \
            --date-confidence \
            --date-inference {params.date_inference} \
            --clock-filter-iqd {params.clock_filter_iqd}
        """
        )
        if wildcards.lineage=='h1n1':
            nd_file = output.node_data
            tree_file = output.tree
            mdata = input.metadata
            from Bio import Phylo
            import json
            from augur.utils import read_metadata
            T = Phylo.read(tree_file, 'newick')
            m,_= read_metadata(mdata)
            with open(nd_file, 'rt') as fh:
                node_data = json.load(fh)

            tmp_nodes = [n for n in T.get_terminals() if n.name in
                            ["A/Fiji/2/1988","A/Memphis/13/1978",
                             "A/Finland/92/1978","A/Leningrad/1954/1",
                             "A/Tientsin/78/1977"]]
            freezer_branch = T.common_ancestor(tmp_nodes)
            # for n in T.find_clades(order='postorder'):
            #     if n.is_terminal():
            #         n.min_year = int(m[n.name]['real_date'][:4])
            #     else:
            #         cdates = [c.min_year for c in n]
            #         n.min_year = min(cdates)
            #         if n.min_year<1970 and max(cdates)>1970 and max(cdates)<1980:
            #             freezer_branch = [c for c in n if c.min_year>1970][0]
            #             break
            rate = node_data['clock']['rate']
            freezer_branch.branch_length+=23*rate
            node_data['nodes'][freezer_branch.name]['clock_length']+=23*rate
            for n in freezer_branch.find_clades():
                node_data['nodes'][n.name]['numdate']+=23
                node_data['nodes'][n.name]['num_date_confidence'][0]+=23
                node_data['nodes'][n.name]['num_date_confidence'][1]+=23
                node_data['nodes'][n.name]['date']=str(int(node_data['nodes'][n.name]['numdate']))+node_data['nodes'][n.name]['date'][4:]
                if n.is_terminal():
                    node_data['nodes'][n.name]['raw_date']=str(int(node_data['nodes'][n.name]['numdate']))+node_data['nodes'][n.name]['raw_date'][4:]

            with open(nd_file, 'wt') as fh:
                json.dump(node_data,fh)
            Phylo.write(T, tree_file, 'newick')

rule ancestral:
    message: "Reconstructing ancestral sequences and mutations"
    input:
        tree = rules.refine.output.tree,
        alignment = rules.align.output
    output:
        node_data = "results/nt-muts_{center}_{lineage}_{segment}_{resolution}_{passage}_{assay}.json"
    params:
        inference = "joint"
    shell:
        """
        augur ancestral \
            --tree {input.tree} \
            --alignment {input.alignment} \
            --output {output.node_data} \
            --inference {params.inference}
        """

rule translate:
    message: "Translating amino acid sequences"
    input:
        tree = rules.refine.output.tree,
        node_data = rules.ancestral.output.node_data,
        reference = reference
    output:
        node_data = "results/aa-muts_{center}_{lineage}_{segment}_{resolution}_{passage}_{assay}.json",
    shell:
        """
        augur translate \
            --tree {input.tree} \
            --ancestral-sequences {input.node_data} \
            --reference-sequence {input.reference} \
            --output {output.node_data} \
        """

rule reconstruct_translations:
    message: "Reconstructing translations required for titer models and frequencies"
    input:
        tree = rules.refine.output.tree,
        node_data = "results/aa-muts_{center}_{lineage}_{segment}_{resolution}_{passage}_{assay}.json",
    output:
        aa_alignment = "results/aa-seq_{center}_{lineage}_{segment}_{resolution}_{passage}_{assay}_{gene}.fasta"
    shell:
        """
        augur reconstruct-sequences \
            --tree {input.tree} \
            --mutations {input.node_data} \
            --gene {wildcards.gene} \
            --output {output.aa_alignment} \
            --internal-nodes
        """

rule traits:
    message:
        """
        Inferring ancestral traits for {params.columns!s}
        """
    input:
        tree = rules.refine.output.tree,
        metadata = rules.parse.output.metadata
    output:
        node_data = "results/traits_{center}_{lineage}_{segment}_{resolution}_{passage}_{assay}.json",
    params:
        columns = "region"
    shell:
        """
        augur traits \
            --tree {input.tree} \
            --metadata {input.metadata} \
            --output {output.node_data} \
            --columns {params.columns} \
            --confidence
        """

rule titers_sub:
    input:
        titers = titer_data,
        aa_muts = rules.translate.output,
        alignments = translations,
        tree = rules.refine.output.tree
    params:
        genes = gene_names
    output:
        titers_model = "results/titers-sub-model_{center}_{lineage}_{segment}_{resolution}_{passage}_{assay}.json",
    shell:
        """
        augur titers sub \
            --titers {input.titers} \
            --alignment {input.alignments} \
            --gene-names {params.genes} \
            --tree {input.tree} \
            --output {output.titers_model}
        """

rule titers_tree:
    input:
        titers = titer_data,
        tree = rules.refine.output.tree
    output:
        titers_model = "results/titers-tree-model_{center}_{lineage}_{segment}_{resolution}_{passage}_{assay}.json",
    shell:
        """
        augur titers tree \
            --titers {input.titers} \
            --tree {input.tree} \
            --output {output.titers_model}
        """

rule mutation_frequencies:
    input:
        metadata = rules.parse.output.metadata,
        alignment = translations
    params:
        genes = gene_names,
        min_date = min_date,
        max_date = max_date,
        pivot_interval = pivot_interval
    output:
        mut_freq = "results/mutation-frequencies_{center}_{lineage}_{segment}_{resolution}_{passage}_{assay}.json"
    shell:
        """
        augur frequencies \
            --alignments {input.alignment} \
            --metadata {input.metadata} \
            --gene-names {params.genes} \
            --min-date {params.min_date} \
            --max-date {params.max_date} \
            --pivot-interval {params.pivot_interval} \
            --output {output.mut_freq}
        """

rule tip_frequencies:
    input:
        tree = rules.refine.output.tree,
        metadata = rules.parse.output.metadata,
        weights = "config/frequency_weights_by_region.json"
    params:
        narrow_bandwidth = 1 / 12.0,
        wide_bandwidth = 3 / 12.0,
        proportion_wide = 0.0,
        weight_attribute = "region",
        min_date = min_date,
        max_date = max_date,
        pivot_interval = pivot_interval
    output:
        tip_freq = "auspice/flu_{center}_{lineage}_{segment}_{resolution}_{passage}_{assay}_tip-frequencies.json"
    shell:
        """
        augur frequencies \
            --method kde \
            --tree {input.tree} \
            --metadata {input.metadata} \
            --narrow-bandwidth {params.narrow_bandwidth} \
            --wide-bandwidth {params.wide_bandwidth} \
            --proportion-wide {params.proportion_wide} \
            --weights {input.weights} \
            --weights-attribute {params.weight_attribute} \
            --pivot-interval {params.pivot_interval} \
            --min-date {params.min_date} \
            --max-date {params.max_date} \
            --output {output}
        """

rule tree_frequencies:
    input:
        tree = rules.refine.output.tree,
        metadata = rules.parse.output.metadata,
    params:
        min_date = min_date,
        max_date = max_date,
        pivot_interval = pivot_interval,
        regions = ['global'],
        min_clade = 20
    output:
        "results/tree-frequencies_{center}_{lineage}_{segment}_{resolution}_{passage}_{assay}.json",
    shell:
        """
        augur frequencies \
            --method diffusion \
            --include-internal-nodes \
            --tree {input.tree} \
            --regions {params.regions} \
            --metadata {input.metadata} \
            --pivot-interval {params.pivot_interval} \
            --minimal-clade-size {params.min_clade} \
            --min-date {params.min_date} \
            --max-date {params.max_date} \
            --output {output}
        """

rule distances:
    input:
        tree = rules.refine.output.tree,
        alignments = translations,
        masks = "config/{segment}_masks.tsv"
    params:
        genes = gene_names,
        attribute_names = _get_mask_attribute_names_by_wildcards,
        mask_names = _get_mask_names_by_wildcards
    output:
        distances = "results/distances_{center}_{lineage}_{segment}_{resolution}_{passage}_{assay}.json",
    shell:
        """
        augur distance \
            --tree {input.tree} \
            --alignment {input.alignments} \
            --gene-names {params.genes} \
            --masks {input.masks} \
            --output {output} \
            --attribute-names {params.attribute_names} \
            --mask-names {params.mask_names}
        """

